algoritmo "JogoDaVelha"
// Função : Recriar o jogo da velha
// Autor : SMO
// Data : 18/09/2021
// Como Jogar:
//   * Escolha um símbolo (X ou O), o jogador com o símbolo X joga primeiro;
//
//   * Digite um número inteiro de 1 a 9 e aperte ENTER para fazer uma jogada,
//  marcando seu símbolo em uma casa, o que será visualizado na tela;
//
//   * Após realizar uma jogada válida, a vez do outro jogador começa;
//
//   * Casas já marcadas por símbolos não podem mais ser escolhidas;
//
//   * O primeiro jogador a marcar seu símbolo três vezes em uma mesma linha,
//  coluna ou diagonal vence;
//
//   * Se as casas disponíveis acabarem, um empate é automaticamente declarado;
//
//   * Para forçar um empate digite 0 (zero) e aperte ENTER;

var
  lacunas: vetor[1..3, 1..3] de caractere
  lacunaEscolhida, i, j: inteiro
  simbolo, status: caractere

  //Função - EscolherLacuna
  //Dado um caractere, tenta encontrar uma lacuna no tabuleiro com o mesmo
  //mesmo valor, caso encontrado ele é substituido pelo símbolo atual, se
  //não uma mensagem de erro é mostrada e o usuário deve digitar outro valor
  funcao EscolherLacuna(valorDigitado: caractere): logico
  var
     k, m: inteiro
     encontrado: logico
     tentarNovamente: caractere
  inicio
        encontrado <- FALSO
        se (valorDigitado = "0") entao
           //Empate forçado
           status <- "F"
           encontrado <- VERDADEIRO
        senao
           k <- 1
           repita
              m <- 1
              repita
                 se (lacunas[k,m] = valorDigitado) entao
                   encontrado <- VERDADEIRO
                   lacunas[k,m] <- simbolo
                   verificarFimDeJogo()
                   k <- 3
                   m <- 3
                 fimse
                 m <- m + 1
              ate (m > 3)
              k <- k + 1
           ate (k > 3)
        fimse
        
        retorne encontrado
  fimfuncao
  
  procedimento verificarFimDeJogo()
  var
     k, m: inteiro
     empate: logico
  inicio
        //Verificando a vitória na vertical e horizontal
        k <- 1
        repita
            se (lacunas[k,1] = lacunas[k,2]) e (lacunas[k,2] = lacunas[k,3]) ou (lacunas[1,k] = lacunas[2,k]) e (lacunas[2,k] = lacunas[3,k]) entao
               status <- "V"
               k <- 3
            fimse
            k <- k + 1
        ate (k > 3)
        //Verificando a vitória nas diagonais
        se (status = "") e ((lacunas[1,1] = lacunas[2,2]) e (lacunas[2,2] = lacunas[3,3]) ou (lacunas[1,3] = lacunas[2,2]) e (lacunas[2,2] = lacunas[3,1])) entao
           status <- "V" //Vitória do símbolo atual
        fimse
        //Verificando empate
        empate <- FALSO
        se (status = "") entao
           empate <- VERDADEIRO
           k <- 1
           repita
              m <- 1
              repita
                 se ((lacunas[k,m] <> "X") e (lacunas[k,m] <> "O")) entao
                   empate <- FALSO
                   k <- 3
                   m <- 3
                 fimse
                 m <- m + 1
              ate (m > 3)
              k <- k + 1
           ate (k > 3)
        fimse
        
        se empate entao
           //Empate por falta de lacunas
           status <- "E"
        fimse
  fimprocedimento

  procedimento redesenharTabuleiro()
  var
  inicio
      LimpaTela
      escreval("+---+---+---+")
      escreval("| ", lacunas[1,1], " | ", lacunas[1,2], " | ", lacunas[1,3], " |")
      escreval("+---+---+---+")
      escreval("| ", lacunas[2,1], " | ", lacunas[2,2], " | ", lacunas[2,3], " |")
      escreval("+---+---+---+")
      escreval("| ", lacunas[3,1], " | ", lacunas[3,2], " | ", lacunas[3,3], " |")
      escreval("+---+---+---+")
  fimprocedimento
  
  procedimento InverterSimbolo()
  var
  inicio
        se (simbolo = "X") entao
           simbolo <- "O"
        senao
           simbolo <- "X"
        fimse
  fimprocedimento

inicio
simbolo <- "X"
status <- ""
//Definindo valores de "1" a "9" para a matriz
para i de 1 ate 3 faca
     para j de 1 ate 3 faca
          lacunas[i,j] <- numpcarac((i - 1)*3 + j)
     fimpara
fimpara

repita
      redesenharTabuleiro()
      escreval()
      escreval("Vai jogar [", simbolo, "] em qual posição?")
      leia(lacunaEscolhida)
      enquanto nao (EscolherLacuna(numpcarac(lacunaEscolhida))) faca
            redesenharTabuleiro()
            escreval()
            escreval("O valor escolhido [", numpcarac(lacunaEscolhida), "] é inválido, escolha outro.")
            escreval("Vai jogar [", simbolo, "] em qual posição?")
            leia(lacunaEscolhida)
      fimenquanto
      InverterSimbolo()
ate (status <> "")

redesenharTabuleiro()
InverterSimbolo()
escreval()
se status = "V" entao
   escreval("Fim de jogo, vitória do [", simbolo,"]!")
senao
   se (status = "F") entao
      escreval("Fim de jogo, empate forçado!")
   senao
      escreval("Fim de jogo, deu velha!")
   fimse
fimse
fimalgoritmo
